name: Build and Release Project AURA

# Trigger on version tags, main branch pushes and manual dispatch
on:
  push:
    branches:
      - main
    tags:
      - 'v*'
      - '*-build-*'
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release Type'
        required: true
        default: 'alpha'
        type: choice
        options:
        - alpha
        - beta
        - release

jobs:
  build-windows:
    runs-on: windows-latest

    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          architecture: 'x64'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install --only-binary=all --upgrade pip
          pip install numpy>=1.26.0
          pip install opencv-python>=4.8.0
          pip install PyQt6>=6.5.0
          pip install psutil>=5.9.0
          pip install dlib>=19.24.0
          pip install pycaw>=20230407
          pip install pywin32>=306
          pip install pyinstaller>=6.0.0

      - name: Verify installation
        run: |
          python -c "import cv2; print('OpenCV version:', cv2.__version__)"
          python -c "import dlib; print('dlib installed successfully')"
          python -c "import PyQt6; print('PyQt6 installed successfully')"
          python -c "import pycaw; print('pycaw installed successfully')"
          python -c "import numpy; print('NumPy version:', numpy.__version__)"
          python -c "import psutil; print('psutil installed successfully')"

      - name: Build application with PyInstaller
        run: |
          pyinstaller main.spec --clean --noconfirm

      - name: Verify build output
        run: |
          if (Test-Path "dist/ProjectAURA/ProjectAURA.exe") {
            Write-Host "✅ ProjectAURA.exe built successfully"
            Get-ChildItem -Path "dist/ProjectAURA" -Recurse | Select-Object Name, Length
          } else {
            Write-Error "❌ ProjectAURA.exe not found"
            exit 1
          }

      - name: Create release package
        shell: powershell
        run: |
          New-Item -ItemType Directory -Force -Path "release" | Out-Null

          # Copy built application
          if (Test-Path "dist/ProjectAURA") {
            Copy-Item -Path "dist/ProjectAURA" -Destination "release/ProjectAURA" -Recurse -Force
          } else {
            Write-Error "Build output folder dist/ProjectAURA not found"
            exit 1
          }

          # Files to try copying (will skip if missing)
          $docs = @("README.md","LICENCE","ENHANCED_USER_GUIDE.md","SAFE_ENHANCEMENT_SUCCESS.md")
          foreach ($f in $docs) {
            if (Test-Path $f) {
              Copy-Item -Path $f -Destination "release/" -Force
              Write-Host "Copied $f"
            } else {
              Write-Warning "Skipping missing file: $f"
            }
          }

          # Create installation instructions
          @"
          Project AURA - Installation Instructions

          Quick Start:
          1. Extract this ZIP file to a folder on your computer
          2. Navigate to the ProjectAURA folder
          3. Run ProjectAURA.exe
          4. Allow camera access when prompted

          Requirements:
          - Windows 10/11 (64-bit)
          - Webcam (required for face detection)
          - Audio devices (for volume control)

          Documentation included in the package if available.
          "@ | Out-File -FilePath "release/INSTALLATION_GUIDE.txt" -Encoding UTF8

      - name: Generate build info
        shell: powershell
        run: |
          $buildDate = Get-Date -Format "yyyy-MM-dd HH:mm:ss UTC"
          $commitHash = git rev-parse --short HEAD
          $commitMessage = git log -1 --pretty=%B

          @"
          # Project AURA - Build Information

          Build Date: $buildDate
          Commit Hash: $commitHash
          Branch: ${{ github.ref_name }}
          Workflow: ${{ github.workflow }}
          Run Number: ${{ github.run_number }}

          Latest Commit:
          $commitMessage
          "@ | Out-File -FilePath "release/BUILD_INFO.md" -Encoding UTF8

      - name: Create ZIP package
        shell: powershell
        run: |
          # Determine release type (workflow_dispatch input or default to 'alpha' for manual)
          $releaseType = if ($env:GITHUB_EVENT_NAME -eq 'workflow_dispatch') { "${{ github.event.inputs.release_type }}" } else { "alpha" }
          if ([string]::IsNullOrEmpty($releaseType)) { $releaseType = "alpha" }
          $buildNumber = "${{ github.run_number }}"
          $commitHash = git rev-parse --short HEAD
          $zipName = "ProjectAURA-${releaseType}-build${buildNumber}-${commitHash}"

          Compress-Archive -Path "release/*" -DestinationPath "${zipName}.zip" -Force

          # Export variables to GITHUB_ENV for later steps
          Add-Content -Path $env:GITHUB_ENV -Value "ZIP_NAME=${zipName}"
          Add-Content -Path $env:GITHUB_ENV -Value "RELEASE_TYPE=${releaseType}"
          Add-Content -Path $env:GITHUB_ENV -Value "BUILD_NUMBER=${buildNumber}"
          Add-Content -Path $env:GITHUB_ENV -Value "COMMIT_HASH=${commitHash}"

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: "${{ env.ZIP_NAME }}.zip"
          name: "Project AURA - ${{ env.RELEASE_TYPE }} Build #${{ env.BUILD_NUMBER }}"
          tag_name: "${{ env.RELEASE_TYPE }}-build-${{ env.BUILD_NUMBER }}"
          generate_release_notes: true
          body: |
            Project AURA - ${{ env.RELEASE_TYPE }} Release
            Build Number: #${{ env.BUILD_NUMBER }}
            Commit: